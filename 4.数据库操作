- 基本查询
--使用年薪进行降序排序
 select empno,ename,sal,deptno,(sal+ifnull(comm,0))*12 jaingjin from emp order by (sal+ifnull(comm,0))*12 desc;
 --显示工资最高的员工的名字和工作岗位
 select empno,ename,job from emp order by sal desc limit 1;
 --显示每种岗位的雇员总数，平均工资
 select empno,job,count(*),format(avg(sal),2) from emp group by job;//format(a,b)格式化，保留小数位数
 --显示各个员工的姓名，工资，及工资级别
 select ename, sal, grade from EMP, SALGRADE where EMP.sal between losal and hisal;
 - 自连接
 --显示员工FORD的上级领导的编号和姓名（mgr是员工领导的编号--empno）
 select leader.empno,leader.ename from emp leader, emp worker where leader.empno = worker.mgr and worker.ename='FORD';//自身连接
 select empno,ename from emp where emp.empno=(select mgr from emp where ename='FORD');//子查询
 --显示SMITH同一部门的员工
 -多行子查询
 --in关键字；查询和10号部门的工作相同的雇员的名字，岗位，工资，部门号，但是不包含10自己的
 select ename,job,sal,deptno from emp where job in(select job from emp where deptno=10)and deptno <=> 10;
 --all关键字；显示工资比部门30的所有员工的工资高的员工的姓名、工资和部门号
 select ename, sal, deptno from EMP where sal > all(select sal from emp where deptno=30);
--any关键字；显示工资比部门30的任意员工的工资高的员工的姓名、工资和部门号
 select ename, sal, deptno from emp where sal > any(select sal from EMP where deptno=30);
--CPU
i7 9代以上
--显卡
GT  GTX950 GTX7960 显卡 真正的9代是965以上 建议GTX1060 
--买台式机不要买整机 
-多列子查询
--查询和SMITH的部门和岗位完全相同的所有雇员，不含SMITH本人
select ename from emp where (deptno, job)=(select deptno, job from emp where ename='SMITH') and ename <> 'SMITH';
- 在from子句中使用子查询
--显示高于自己部门平均工资的员工的姓名、部门、工资、平均工资
select deptno ,format(avg(sal),2) as avgsal from emp group by deptno;//建立临时表
select ename,emp.deptno,sal,avg(sal) from emp,(select deptno ,avg(sal) as avgsal from emp group by deptno) tmp where tmp.deptno=emp.deptno
and emp.sal>tmp.avgsal;
select ename, deptno, sal, format(asal,2) from emp, (select avg(sal) asal, deptno dt from emp group by deptno) tmp where 
emp.sal > tmp.asal and emp.deptno=tmp.dt;
--显示每个部门的信息（部门名，编号，地址）和人员数量
select deptno,count(*) as pnum from emp group by deptno;//建立临时表
select dept.deptno, dname,loc from dept, (select deptno,count(*) as pnum from emp group by deptno) tmp where dept.deptno=tmp.deptno;
-内连接
--select ename,dname from emp inner join dept on emp.deptno=dept.deptno;
-外连接
--左外连接（保证了左表的完整性)
select 字段名 from 表1 left join 表2 on(不可省略） 连接条件
--右外连接（保证了右表的完整性，右表中的数据至少出现一次)
-索引（大大增加查询的速度，但是对增删改的速度有影响）
--表按照索引默认排序，索引会形成一棵二叉树，可以用二分查找
-解决方法，创建索引
-创建主键索引
第一种方式
-- 在创建表的时候，直接在字段名后指定 primary key 
create table user1(id int primary key, name varchar(30));
第二种方式：
-- 在创建表的最后，指定某列或某几列为主键索引 create table user2(id int, name varchar(30), primary key(id));
第三种方式：
create table user3(id int, name varchar(30));
-- 创建表以后再添加主键 alter table user3 add primary key(id)//alter table 表名 add index(empno);
--如果没有索引，就需要逐条进行查询，有索引就会二分查找；
--如果需要增删操作可删掉索引再进行操作；当我们添加一个索引，不能够解决所有查询问题，需要分别给字段建立索引；索引是以空间换时间；
-唯一索引的创建
第一种方式
-- 在表定义时，在某列后直接指定unique唯一属性。 create table user4(id int primary key, name varchar(30) unique);
第二种方式
-- 创建表时，在表的后面指定某列或某几列为unique create table user5(id int primary key, name varchar(30), unique(name));
第三种方式
create table user6(id int primary key, name varchar(30)）； alter table user6 add unique(name);
-查询索引
--show keys from 表名
-删除索引
第一种方法
-删除主键索引： alter table 表名 drop primary key;
第二种方法
-其他索引的删除： alter table 表名 drop index 索引名； 索引名就是show keys from 表名中的 Key_name 字段
mysql> alter table user10 drop index idx_name;
第三种方法方法： drop index 索引名 on 表名
mysql> drop index name on user8;
-全文索引的创建
--当对文章字段或有大量文字的字段进行检索时，会使用到全文索引。MySQL提供全文索引机制，但是有要求，要求表的存储引擎必须是MyISAM，而且默认的全文索引
支持英文，不支持中文。如果对中文进行全文检索，可以使用sphinx的中文版(coreseek)。
CREATE TABLE articles ( id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY, title VARCHAR(200), 
body TEXT, FULLTEXT (title,body) )engine=MyISAM;
-事务基本操作
-开始一个事务
start transaction;
-创建一个保存点
--savepoint 保存点名；
-回到保存点（根据具体情况）
--rollback to 保存点名;
-事务操作注意事项
--如果没有设置保存点，也可以回滚，只能回滚到事务的开始。直接使用 rollback(前提是事务还没有提交)；
如果一个事务被提交了（commit），则不可以回退（rollback）；可以选择回退到哪个保存点；
InnoDB支持事务，MyISAM不支持事务；InnoDB不支持全文索引，MyISAM支持全文索引；
开始事务可以使 start transaction
-无隔离性的问题
脏读，不可重复读，幻读
-设置事务的隔离级别
--set session transaction isolation level read uncommitted;
-查看当前的隔离级别
--select @@tx_isolation;
-事务的ACID特性
--原子性(Atomicity)：
事务是应用中最小的执行单位，就如原子是自然界的最小颗粒，具有不可再分的特征一样，事务是应用中不可再分
的最小逻辑执行体。
--一致性(Consistency)：
事务执行的结果，必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库只包含事务成功提交的结果时，数据库处于一致性状态。如果系统运行发生中断，
某个事务尚未完成而被迫中断，而改未完成的事务对数据库所做的修改已被写入数据库，此时数据库就处于一种不正确（不一致）的状态。因此一致性是通过原子性来保
证的。
--隔离性(Isolation)：
各个事务的执行互不干扰，任意一个事务的内部操作对其他并发事务都是隔离的。也就是说，并发执行的事务之间不能看到对方的中间状态，并发执行的事务之间不能
互相影响。
--持久性(Durability)：
持久性是指一个事务一旦被提交，它对数据库所做的改变都要记录到永久存储其中（如：磁盘）。
-视图
--创建视图：create view 视图名 as select语句；
--修改了视图，对基表数据没有影响
update v_ename_dname set dname='sales' where ename='CLARK'; select * from EMP where ename='CLARK';
--修改了基表，对视图有影响
-order by 可以用在视图中，但是如果从该视图检索数据 select 中也含有 order by ,那么该视图中的order by 将被覆盖
-用户
--用户信息
MySQL中的用户，都存储在系统数据库mysql的user表中
select host,user,authentication_string from user;
--字段解释：
host：表示这个用户可以从哪个主机登陆，如果是localhost，表示只能从本机登陆
user：用户名
authentication_string：用户密码通过password函数加密后的
*_priv：用户拥有的权限
-创建用户
--create user '用户名'@'登陆主机/ip' identified by '密码';
-删除用户
--drop user '用户名'@'主机名'
-修改用户密码
--自己改自己密码
set password=password('新的密码');
--root用户修改指定用户的密码
set password for '用户名'@'主机名'=password('新的密码')； set password for 'litao'@'localhost'=password('abcdefg');
-给用户授权
刚创建的用户没有任何权限。需要给用户授权。
grant 权限列表 on 库.对象名 to '用户名'@'登陆位置' [identified by '密码']
-回收权限
revoke 权限列表 on 库.对象名 from '用户名'@'登陆位置'；
所有的权限是在user表里的
